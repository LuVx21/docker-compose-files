name: 构建docker镜像

on:
  workflow_dispatch:
    inputs:
      image:
        description: '镜像名称'
        required: true
      tag:
        description: '镜像版本/代码分支(多个时逗号分割), v1,v2'
        required: true
      buildArg:
        description: 'Dockerfile的构建参数, arg1=foo,arg2=bar'
        required: false
        default: ''
      platform:
        description: '架构'
        required: true
        default: 'linux/arm64,linux/amd64'
        type: choice
        options:
          - linux/arm64,linux/amd64
          - linux/arm64
          - linux/amd64
      customArg:
        description: '自定义参数'
        required: false
        default: ''

env:
  REGISTRY_USER: "${{ secrets.REGISTRY_USER }}"
  REGISTRY_PASSWORD: "${{ secrets.REGISTRY_PASSWORD }}"

jobs:
  build:
    name: 构建镜像
    runs-on: ubuntu-latest
    steps:
      - name: 参数信息
        run: |
          echo "=============================================================================="
          echo ${{ inputs.image }}
          echo ${{ inputs.tag }}
          echo "=============================================================================="
      - name: 代码检出
        uses: actions/checkout@v4
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: 登录到Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
      - name: 登录GitHub容器
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_CR_PASSWORD }}
      - name: 小写GitHub用户名(namespace)
        run: echo "ACTOR_LOWER=$(echo '${{ github.actor }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: 登录阿里云容器
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ALI_CR }}
          username: ${{ secrets.ALI_CR_USER }}
          password: ${{ secrets.ALI_CR_PASSWORD }}
      # - name: 登录腾讯云容器
      #   uses: docker/login-action@v3
      #   with:
      #     registry: ${{ vars.TX_CR }}
      #     username: ${{ secrets.TX_CR_USER }}
      #     password: ${{ secrets.TX_CR_PASSWORD }}
      - name: 磁盘信息
        run: |
          echo "磁盘信息"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
      - name: 构建
        env:
          CUSTOM_ARG: ${{ inputs.customArg }}
          ALI_CR: ${{ vars.ALI_CR }}
          # TX_CR: ${{ vars.TX_CR }}
        run: |
          repository=${{ inputs.image }}
          tag=${{ inputs.tag }}
          buildArg=${{ inputs.buildArg }}
          platform=${{ inputs.platform }}

          os=$(uname -s)


          # if [[ ! $tag =~ 'alpine' ]]; then
          #   tags+=("latest")
          # fi
          for _tag in ${tag//,/ }; do
            if [[ $_tag == *-* ]]; then
              # 提取出第一个-前和后的内容
              prefix="${_tag%%-*}" suffix="${_tag#*-}"
              # -前内容处理版本号
              major="${prefix%%.*}-${suffix}" minor="${prefix%.*}-${suffix}"
            else
              major="${_tag%%.*}" minor="${_tag%.*}"
            fi
            tags+=($_tag ${major} ${minor})
          done
          tags=($(echo "${tags[@]}" | tr ' ' '\n' | sort | uniq | tr '\n' ' '))
          if [[ -n $buildArg ]]; then
            for arg in ${buildArg//,/ }; do
              temp+="--build-arg $arg "
            done
            buildArg=$temp
          fi

          case "${repository}" in
            "chartdb")
              url=https://github.com/chartdb/chartdb.git#v$tag
              ;;
            "dicedb")
              url=https://github.com/DiceDB/dice.git#v$tag
              ;;
            "json4u")
              url=https://github.com/loggerhead/json4u.git#v$tag
              ;;
            "jupyter")
              url=https://github.com/LuVx21/docker-compose-files.git#master:jupyter
              url="./jupyter"
              ;;
            "pichome")
              url=https://github.com/zyx0814/Pichome-docker.git
              ;;
            "sentinel-dashboard")
              curl https://raw.githubusercontent.com/alibaba/Sentinel/master/sentinel-dashboard/Dockerfile > ./sentinel-dashboard/Dockerfile
              cd sentinel-dashboard && sed -i "" "s/1.8.6/1.8.8/g" Dockerfile && sed -i "" "s/amd64\///g" Dockerfile
              ;;
            "base"|"oracle_jdk"|"graalvm_jdk"|"mvnd"|"vscode"|"upx"|"rocketmq-dashboard")
              url=https://github.com/LuVx21/docker-compose-files.git#master:luvx
              [[ $tag =~ 'alpine' ]] && url="./luvx/alpine" || url="./luvx"
              target="--target ${repository}"
              ;;
            "custom")
              chmod +x *.sh
              eval ${CUSTOM_ARG}
              exit 0
              ;;
            *)
              # exit 0
            ;;
          esac;

          image="luvx/${repository}"
          echo "构建镜像: ${image} 版本: ${tags[@]} 架构: ${platform} 构建参数: ${buildArg} 上下文: ${url} 自定义参数: ${CUSTOM_ARG}"

          for _tag in ${tags[@]}; do
            if [[ ! $os == 'Darwin' ]]; then
              image_info+="-t ghcr.io/${{ env.ACTOR_LOWER }}/${repository}:${_tag} -t ${image}:${_tag} "
            fi
            image_info+="-t ${ALI_CR}/${image}:${_tag} "
          done

          echo "执行命令: docker buildx build --push ${buildArg} ${target} --platform ${platform} ${image_info} ${url} ${CUSTOM_ARG}" | sed -E 's/ (--|-t)/\n\1/g'
          docker buildx build --push ${buildArg} ${target} \
            --platform ${platform} \
            ${image_info} \
            ${url} ${CUSTOM_ARG}
      - name: 磁盘信息
        run: |
          echo "磁盘信息"
          echo "=============================================================================="
          df -hT
          docker system df
          echo "=============================================================================="
      - name: 清理磁盘
        run: docker system prune -f