name: 构建docker镜像

on:
  workflow_dispatch:
    inputs:
      image:
        description: '要构建的镜像模块'
        required: true
      tag:
        description: '要构建的镜像版本'
        required: true
      buildArg:
        description: 'Dockerfile的构建参数, arg1=foo arg2=bar'
        required: false
        default: ''
      platform:
        description: '架构'
        required: true
        default: 'linux/arm64,linux/amd64'
        type: choice
        options:
        - linux/arm64,linux/amd64
        - linux/arm64
        - linux/amd64

env:
  REGISTRY_USER: "${{ secrets.REGISTRY_USER }}"
  REGISTRY_PASSWORD: "${{ secrets.REGISTRY_PASSWORD }}"

jobs:
  build:
    name: 构建镜像
    runs-on: ubuntu-latest
    steps:
      - name: 参数信息
        run: |
          echo "=============================================================================="
          echo ${{ inputs.image }}
          echo ${{ inputs.tag }}
          echo "=============================================================================="
      - name: 代码检出
        uses: actions/checkout@v4
      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3
      - name: 登录到Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
      - name: 磁盘信息
        run: |
          echo "磁盘信息"
          echo "=============================================================================="
          df -hT
          echo "=============================================================================="
      - name: 构建
        env:
          MODULE: ${{ inputs.image }}
        run: |
          module=$MODULE
          tag=${{ inputs.tag }}
          buildArg=${{ inputs.buildArg }}
          platform=${{ inputs.platform }}
          if [[ -n $buildArg ]]; then
            for arg in $buildArg; do
              temp+="--build-arg $arg "
            done
            buildArg=$temp
          fi
          echo "参数-> 镜像:${module}:${tag} 架构: ${platform} 构建参数: ${buildArg}"

          if [ "$module" = "chartdb" ];then
            image='luvx/chartdb' url=https://github.com/chartdb/chartdb.git#$tag
          elif [ "$module" = "dicedb" ];then
            image='luvx/dicedb' url=https://github.com/DiceDB/dice.git#$tag
          elif [ "$module" = "json4u" ];then
            image='luvx/json4u' url=https://github.com/loggerhead/json4u.git#$tag
          elif [ "$module" = "duckdb" ];then
            image='luvx/duckdb' url=https://github.com/LuVx21/docker-compose-files.git#master:duckdb
            url='./duckdb'
          elif [ "$module" = "jupyter" ];then
            image='luvx/jupyter' url=https://github.com/LuVx21/docker-compose-files.git#master:jupyter
            url='./jupyter'
          elif [ "$module" = "rocketmq-dashboard" ];then
            image='luvx/rocketmq-dashboard' url=https://github.com/LuVx21/docker-compose-files.git#master:ali
            url='./ali'
          elif [ "$module" = "pichome" ];then
            image='luvx/pichome' url=https://github.com/zyx0814/Pichome-docker.git
          elif [ "$module" = "sentinel" ];then
            image='luvx/sentinel-dashboard'
            curl https://raw.githubusercontent.com/alibaba/Sentinel/master/sentinel-dashboard/Dockerfile > ./sentinel-dashboard/Dockerfile
            cd sentinel-dashboard && sed -i "" 's/1.8.6/1.8.8/g' Dockerfile && sed -i "" 's/amd64\///g' Dockerfile
          else
            echo "自定义构建镜像: ${module}"
            echo "执行命令: docker buildx build --platform ${platform} ${buildArg} ${module} --push"
            docker buildx build --platform ${platform} ${buildArg} ${module} --push
            # echo -e "无指定模块名"
            exit 0
          fi
          echo "构建镜像: ${image}:${tag} 架构: ${platform} 构建参数: ${buildArg} 上下文: ${url}"
          echo "执行命令: docker buildx build -t ${image}:latest -t ${image}:${tag} --platform ${platform} ${buildArg} --push ${url}"
          docker buildx build -t ${image}:latest -t ${image}:${tag} --platform ${platform} ${buildArg} --push ${url}
      - name: 磁盘信息
        run: |
          echo "磁盘信息"
          echo "=============================================================================="
          df -hT
          docker system df
          echo "=============================================================================="
      - name: 清理磁盘
        run: docker system prune -f