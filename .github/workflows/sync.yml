name: 同步DockerHub镜像

on:
  workflow_dispatch:
    inputs:
      platform:
        description: '架构'
        required: true
        default: 'linux/arm64,linux/amd64'
        type: choice
        options:
        - linux/arm64,linux/amd64
        - linux/arm64
        - linux/amd64
      dockerhub_images:
        description: '要拉取的镜像,如foo/bar:v1,bar/foo:v2(空则读取images.txt)'
        required: false
        default: ''

jobs:
  sync:
    name: 同步镜像
    runs-on: ubuntu-latest
    # permissions:
    #   contents: read
    #   packages: write
    steps:
      - name: 参数信息
        run: |
          echo "=============================================================================="
          echo ${{ inputs.platform }}
          echo ${{ inputs.dockerhub_images }}
          echo "=============================================================================="
      - name: 代码检出
        uses: actions/checkout@v4
      # 增加可用磁盘空间
      - name: 增加构建磁盘空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: 'true'
          remove-haskell: 'true'
          # 如果空间还是不够用,可以把以下开启,清理出更多空间
          # remove-android: 'true'
          # remove-codeql: 'true'
          build-mount-path: '/var/lib/docker/'
      - name: 重启Docker服务
        run: sudo service docker restart
      - name: 登录GitHub容器
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_CR_PASSWORD }}
      - name: 小写GitHub用户名(namespace)
        run: echo "ACTOR_LOWER=$(echo '${{ github.actor }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: 登录阿里云容器
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ALI_CR }}
          username: ${{ secrets.ALI_CR_USER }}
          password: ${{ secrets.ALI_CR_PASSWORD }}
      - name: 登录腾讯云容器
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.TX_CR }}
          username: ${{ secrets.TX_CR_USER }}
          password: ${{ secrets.TX_CR_PASSWORD }}
      - name: 从DockerHub拉取Docker镜像
        run: |
          input_images=${{ inputs.dockerhub_images }}
          input_platform=${{ inputs.platform }}
          function pullMergeSync() {
            local image=$1
            local platform_str=$2
            echo "镜像: $image, 平台: $platform"

            image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
            registry=$(echo "$image" | awk -F'/' '{if (NF==3) print $1; else print ""}')
            namespace=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
            image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
            image_tag=$(echo "$image_name_tag" | awk -F':' '{if (NF==2) print $2; else print "latest"}')

            new_image_name=$image_name
            if [[ ! -z $registry || ! $namespace == luvx ]]; then
                rsn=$(echo "$image" | awk -F':' '{print $1}')
                new_image_name=`echo $rsn | sed 's/\//_/g'`
            fi
            echo "解构后信息-> 服务: $registry 空间:$namespace 镜像:$image_name 标签:$image_tag 新名称:$new_image_name"

            local platform_array=(${platform_str//,/ })
            local platform_count=${#platform_array[@]}
            for registry in ${{ vars.ALIYUN }} ${{ vars.TXYUN }} ghcr.io,${{ env.ACTOR_LOWER }}; do
              registry_arr=(${registry//,/ })
              new_rsn=${registry_arr[0]}/${registry_arr[1]}/$new_image_name
              ps=''
              for platform in ${platform_array[@]}; do
                tag_with_p="${image_tag}_${platform//\//_}"

                docker pull --platform=$platform $image
                new_image=$new_rsn:$tag_with_p
                ps+="$new_image "
                echo "同步镜像 $image -> $new_image"
                docker tag $image $new_image && docker push $new_image
              done

              if [[ $platform_count -ge 2 ]]; then
                echo "多平台: $ps -> $new_rsn:$image_tag"
                docker manifest create $new_rsn:$image_tag $ps && docker manifest push $new_rsn:$image_tag && docker manifest rm $new_rsn:$image_tag
              fi
              for i in ${ps}; do
                docker image rm $i
              done
            done
            docker image prune -af
            # docker image rm $image
          }

          if [[ -n $input_images ]]; then
            for image in ${input_images//,/ }; do
              pullMergeSync $image $input_platform
            done
            exit 0
          fi

          echo "同步images.txt镜像"
          while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi

            platform=$(echo "$line" | awk -F'platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            if [ -z "$platform" ]; then
                image=$(echo "$line" | awk '{print $NF}')
                pullMergeSync $image $cur_platform
            else
                cur_platform=$platform
            fi
          done < images.txt