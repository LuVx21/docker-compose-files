name: 同步DockerHub镜像

on:
  workflow_dispatch:
    inputs:
      platform:
        description: '架构'
        required: true
        default: 'linux/arm64'
        type: choice
        options:
        - linux/386
        - linux/arm64
        - linux/amd64
        - linux/ppc64le
      dockerhub_images:
        description: '要拉取的镜像,如foo/bar:v1,bar/foo:v2(空则读取images.txt)'
        required: false
        default: ''

jobs:
  sync:
    name: 同步镜像
    runs-on: ubuntu-latest
    # permissions:
    #   contents: read
    #   packages: write
    steps:
      - name: 参数信息
        run: |
          echo "=============================================================================="
          echo ${{ inputs.platform }}
          echo ${{ inputs.dockerhub_images }}
          echo "=============================================================================="
      # 增加可用磁盘空间
      - name: 增加构建磁盘空间
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 2048
          swap-size-mb: 128
          remove-dotnet: 'true'
          remove-haskell: 'true'
          # 如果空间还是不够用,可以把以下开启,清理出更多空间
          # remove-android: 'true'
          # remove-codeql: 'true'
          build-mount-path: '/var/lib/docker/'
      - name: 重启Docker服务
        run: sudo service docker restart
      - name: 登录GitHub容器
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_REGISTRY_PASSWORD }}
      - name: 小写GitHub用户名(namespace)
        run: echo "ACTOR_LOWER=$(echo '${{ github.actor }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
      - name: 登录阿里云容器
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ALIYUN_REGISTRY }}
          username: ${{ secrets.ALIYUN_REGISTRY_USER }}
          password: ${{ secrets.ALIYUN_REGISTRY_PASSWORD }}
      - name: 登录腾讯云容器
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.TXYUN_REGISTRY }}
          username: ${{ secrets.TXYUN_REGISTRY_USER }}
          password: ${{ secrets.TXYUN_REGISTRY_PASSWORD }}
      - name: 从DockerHub拉取Docker镜像
        run: |
          input_images=${{ inputs.dockerhub_images }}
          input_platform=${{ inputs.platform }}
          function pullAndSync() {
            local platform=$1
            local images=$2
            echo "平台: $platform, 镜像: $images"

            local array=(${images//,/ })
            for image in ${array[@]}; do
              image_name_tag=$(echo "$image" | awk -F'/' '{print $NF}')
              namespace=$(echo "$image" | awk -F'/' '{if (NF==3) print $2; else if (NF==2) print $1; else print ""}')
              image_name=$(echo "$image_name_tag" | awk -F':' '{print $1}')
              image_tag=$(echo "$image_name_tag" | awk -F':' '{if (NF==2) print $2; else print "latest"}')
              echo "解构后信息-> 空间:$namespace 镜像:$image_name 标签:$image_tag"
              echo "拉取镜像 $image"
              docker pull --platform=$platform $image

              rsn=$(echo "$image" | awk -F':' '{print $1}')
              new_rsn=`echo $rsn | sed 's/\//_/g'`
              new_tag=${image_tag}
              if [[ ! "$platform" =~ "arm" ]];then
                new_tag="${new_tag}_${platform//\//_}"
              fi
              echo "新标签: $rsn:$image_tag -> $new_rsn:$new_tag"

              for registry in ${{ vars.ALIYUN }} ${{ vars.TXYUN }} ghcr.io,${{ env.ACTOR_LOWER }}; do
                arr=(${registry//,/ })
                new_image=${arr[0]}/${arr[1]}/$new_rsn:$new_tag
                echo "同步镜像 $image -> $new_image"
                docker tag $image $new_image
                docker push $new_image && docker image rm $new_image
              done
              docker image rm $image
            done
          }

          if [[ ! -z $input_images ]]; then
            pullAndSync $input_platform $input_images
            exit 0
          fi

          echo "同步images.txt镜像"
          declare -A map
          # cur_platform="linux/arm64"
          while IFS= read -r line || [ -n "$line" ]; do
            [[ -z "$line" ]] && continue
            if echo "$line" | grep -q '^\s*#'; then
                continue
            fi

            platform=$(echo "$line" | awk -F'platform[ =]' '{if (NF>1) print $2}' | awk '{print $1}')
            if [ -z "$platform" ]; then
                image=$(echo "$line" | awk '{print $NF}')
                platforms=( ${cur_platform//,/ } )
                for p in ${platforms[@]}; do
                    [[ -z ${map[$p]} ]] && prefix="" || prefix=","
                    map[$p]=${map[$p]}$prefix$image
                done
            else
                cur_platform=$platform
            fi
          done < images.txt

          for key in ${!map[*]};do
            pullAndSync $key ${map[$key]}
          done